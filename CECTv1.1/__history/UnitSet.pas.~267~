unit UnitSet;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, BusinessSkinForm, bsSkinCtrls,


  bsSkinExCtrls, bsSkinShellCtrls, JvComponentBase, JvFormPlacement,
  bsSkinBoxCtrls, Vcl.ExtCtrls, Vcl.Menus, bsSkinMenus, Vcl.StdCtrls,
  Vcl.Mask;

type
  TFrmSet = class(TForm)
    skinform_1: TbsBusinessSkinForm;
    FormStorage_main: TJvFormStorage;
    Panel_mods: TbsSkinExPanel;
    statusbar_1: TbsSkinStatusBar;
    statuspanel_msg: TbsSkinStatusPanel;
    gauge_1: TbsSkinGauge;
    ListBox_Mods: TbsSkinListBox;
    Timer1: TTimer;
    Pop_sets: TbsSkinPopupMenu;
    MenuItem_set_title: TMenuItem;
    N1: TMenuItem;
    MenuItem_set_save: TMenuItem;
    bsSkinExPanel1: TbsSkinExPanel;
    Label_setname: TbsSkinLabel;
    bsSkinStdLabel2: TbsSkinStdLabel;
    bsSkinEdit1: TbsSkinEdit;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure ListBox_ModsDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure ListBox_ModsDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure FormDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure ListBox_ModsListBoxKeyPress(Sender: TObject; var Key: Char);
    procedure ListBox_ModsListBoxKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormCreate(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure MenuItem_set_saveClick(Sender: TObject);
  private
    procedure AddNewItem;
    procedure ReorderList(Key: Char);
    procedure SaveSet;
    function IsValidFileName(thisfile: string): Boolean;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FrmSet: TFrmSet;

implementation

{$R *.dfm}
Uses Main;


procedure TFrmSet.SaveSet();
var
  SaveIt:Boolean;
  FileToSave: String;
  JustTheName: string;

  i:Integer;

begin

SaveIt := false;
statuspanel_msg.Caption:='Ready';

  if (ListBox_Mods.Items.Count<=0) then begin

    FrmMain.msgdlg_1.MessageDlg('I don'' want to save an empty list, sorry.',
    mtWarning, [mbOk], 0);
    Exit;

  end;






    JustTheName:= Label_setname.Caption;


    if (JustTheName='?') then JustTheName:='';


    JustTheName := FrmMain.InputDialog_1.InputBox('Set name','Write the set name',JustTheName);
    JustTheName := JustTheName.ToLower();

    JustTheName := JustTheName.Replace('.txt','').Replace('.','').Replace('\','').Replace('/','').Replace(':','');


    if (JustTheName.IsEmpty) then begin

         FrmMain.msgdlg_1.MessageDlg('Invalid name set '+ #13+ JustTheName+#13+'Try again.',  mtWarning, [mbOk], 0);
     Exit;


    end;




    JustTheName := JustTheName + '.txt';

    FileToSave:= FrmMain.ModTXTFolder+'\'+JustTheName;


    if not ( IsValidFileName(FileToSave)   ) then begin

         FrmMain.msgdlg_1.MessageDlg('Invalid name set '+ #13+ JustTheName+#13+'Try again.',  mtWarning, [mbOk], 0);
         Exit;
    end;

    Label_setname.Caption:= JustTheName;

   ListBox_Mods.Items.SaveToFile(  FileToSave);
   statuspanel_msg.Caption:='File saved';




end;

procedure TFrmSet.Timer1Timer(Sender: TObject);
begin
Timer1.Enabled:= False;

if not (FrmMain.SetToOpen.IsEmpty) then begin
  ListBox_Mods.Items.LoadFromFile( FrmMain.SetToOpen);
  Label_setname.Caption := ExtractFileName(FrmMain.SetToOpen);

end;


end;

procedure TFrmSet.FormClose(Sender: TObject; var Action: TCloseAction);
begin

Action := caFree;

end;

procedure TFrmSet.FormCreate(Sender: TObject);
begin
Timer1.Enabled:= True;
end;

procedure TFrmSet.FormDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
Accept := True;
end;

procedure TFrmSet.ListBox_ModsDragDrop(Sender, Source: TObject; X,
  Y: Integer);
begin

AddNewItem();

end;


procedure TFrmSet.AddNewItem();
var
  NewItem: string;
  i:Integer;
  ItemFound: Boolean;
begin




  NewItem := FrmMain.DM.query_mods.FieldByName('modfile').AsString;
  ItemFound := False;



  for I := 0 to ListBox_Mods.Items.Count-1 do begin

    if ( ListBox_Mods.Items[i] = NewItem  ) then ItemFound := True;
  end;



  if not (ItemFound)  then ListBox_Mods.Items.Add( NewItem);



end;
procedure TFrmSet.ListBox_ModsDragOver(Sender, Source: TObject; X,
  Y: Integer; State: TDragState; var Accept: Boolean);
begin
Accept := True;
end;

procedure TFrmSet.ListBox_ModsListBoxKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
if (Key = VK_DELETE) then       ListBox_Mods.Items.Delete( ListBox_Mods.ItemIndex  );

end;

procedure TFrmSet.ListBox_ModsListBoxKeyPress(Sender: TObject;
  var Key: Char);
begin

if (ListBox_Mods.Items.Count>0) then begin
  if (Key='+') or  (Key='-') then ReorderList(Key);
end;



end;


procedure TFrmSet.MenuItem_set_saveClick(Sender: TObject);
begin

SaveSet;




end;



function TFrmSet.IsValidFileName(thisfile:string):Boolean;
const
  { for short 8.3 file names }
  ShortForbiddenChars : set of Char = [';', '=', '+', '<', '>', '|',
                                       '"', '[', ']', '\', '/', ''''];
  { for long file names }
  LongForbiddenChars  : set of Char = ['<', '>', '|', '"', '\', '/', ':', '*', '?'];


var
  Handle: THandle;
  i:Integer;
  stillvalid:Boolean;
  thisname:string;
begin

  //check if file exists

{$REGION 'Check if exists'}
  
    if (FileExists( thisfile)) then begin
  
        i:= FrmMain.msgdlg_1.MessageDlg('File exists, overwrite it ?', mtWarning, [mbYes,mbNo], 1);
  
        Exit(i=6); //i=6 yes to overwrite
    end;
  
{$ENDREGION}
  //valid file name?

{$REGION 'Check if valid file name'}
  

    thisname := ExtractFileName(thisfile);

    stillvalid := True;
  
    for I := 1 to Length(thisname) do
        stillvalid := stillvalid and not (thisname[I] in LongForbiddenChars);
  
        if (stillvalid) then begin
  
            for I := 1 to Length(thisname) do
            stillvalid := stillvalid and not (thisname[I] in ShortForbiddenChars);

        end;
  
  if not (stillvalid) then Exit(False);
        
  
  
{$ENDREGION}




try

    Handle := CreateFile(PChar(thisfile), GENERIC_READ or GENERIC_WRITE, 0, nil, CREATE_NEW, 0, 0);

    if Handle <> INVALID_HANDLE_VALUE then begin
        CloseHandle(Handle);
        DeleteFile(thisfile);

        Exit(True);


    end;



except on E: Exception do

end;







  Result := False;














end;


(*
procedure CreateEmptyFile(const FileName: string);
var
  Handle: THandle;
begin
  Handle := CreateFile(PChar(FileName), GENERIC_READ or GENERIC_WRITE, 0,
nil, CREATE_NEW, 0, 0);
  if Handle <> INVALID_HANDLE_VALUE then
    CloseHandle(Handle)
  else
    RaiseLastWin32Error;
end;
  RPC_E_SERVERFAULT := r;

*)


procedure TFrmSet.ReorderList(Key:Char);
var
  OriginalItem: string;
  MovedItem: string;
begin

if (Key='+') then begin //up

  if not (ListBox_Mods.ItemIndex=0) then  begin

    OriginalItem:= ListBox_Mods.Items[ ListBox_Mods.ItemIndex];
    MovedItem := ListBox_Mods.Items[ ListBox_Mods.ItemIndex-1];

    ListBox_Mods.Items[ ListBox_Mods.ItemIndex] := MovedItem;
    ListBox_Mods.Items[ ListBox_Mods.ItemIndex-1] := OriginalItem;
    ListBox_Mods.ItemIndex := ListBox_Mods.ItemIndex -1;

  end;

End;


if (Key='-') then begin //up

  if not (ListBox_Mods.ItemIndex=  ListBox_Mods.Items.Count-1   ) then  begin

    OriginalItem:= ListBox_Mods.Items[ ListBox_Mods.ItemIndex];
    MovedItem := ListBox_Mods.Items[ ListBox_Mods.ItemIndex+1];

    ListBox_Mods.Items[ ListBox_Mods.ItemIndex] := MovedItem;
    ListBox_Mods.Items[ ListBox_Mods.ItemIndex+1] := OriginalItem;
    ListBox_Mods.ItemIndex := ListBox_Mods.ItemIndex +1;





  end;

End;






end;
end.
