unit UnitDataModule;

interface

uses
  System.SysUtils, System.Classes, FireDAC.UI.Intf, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Stan.ExprFuncs, Data.DB, FireDAC.Comp.Client, FireDAC.Comp.UI,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet;

type
  TDataModule1 = class(TDataModule)
    fdgxwtcrsr1: TFDGUIxWaitCursor;
    con_1: TFDConnection;
    query_mods: TFDQuery;
    ds_query_mods: TDataSource;
    query_INI: TFDQuery;
  private

    FileList: TStringList;

    procedure DeleteMods;
    procedure Log(m: string);

    { Private declarations }
  public
    LastMessage: string;
    function UpdateModList(thisfolder: string): string;

    function SetupData(s: string): Boolean;

    { Public declarations }
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}
uses Main;


function TDataModule1.SetupData(s: string): Boolean;
var
  res: Boolean;
begin
  LastMessage :='';
  res := FileExists(s);


  if (res) then
  begin
    with con_1 do
    begin
      Close;
      Params.Clear;
      Params.Add('Database=' + s);
      Params.Add('LockingMode=Normal');
      Params.Add('Synchronous=Full');
      Params.Add('DateTimeFormat=DateTime');
      Params.Add('DriverID=SQLite');
      LoginPrompt := False;
      try
        Connected := True;
        query_mods.Open();
        query_mods.First;

       // MemTable_modsonpc.Active := True;
        //UpdateMemTable;


        res := True;
      except
        on E: Exception do
          LastMessage := 'Can not open DB file' + #13 + s + #13 + #13 +
            E.Message;

      end;
    end;

  end
  else
    LastMessage := 'DB File not found'#13 + s; // if exists

  result := res;

end;



  procedure TDataModule1.Log(m: string);
  begin
    FrmMain.Log(m);
  end;




  procedure TDataModule1.DeleteMods();
  begin

    with (query_INI ) do
    begin
      Close;
      Sql.Clear;

      Sql.Text := 'delete from mods;';

      try
        Prepare;
        Transaction.StartTransaction;
        ExecSQL;
        Transaction.Commit;
      except
        on E: Exception do
        begin
          Log(E.Message);
          LastMessage := E.Message;
        end;

      end;
      Close;

    end;

    query_mods.Refresh;

  end;

  function TDataModule1.UpdateModList(thisfolder: string): string;
  var
    r: string;
  begin


    // thisfolder should be validated by the sender

    FrmMain.Log('Updating mod list', 'Begin');
    FrmMain.Log('Mod folder:' + thisfolder);

    FrmMain.Log('Deleting old data from mods');

    DeleteMods();

    FileList := TStringList.Create;

    FrmMain.Log('Reading mod files from ' + thisfolder);

    // Open table

    ScanForAllMods(thisfolder);


    r := '';
    LastMessage := '';

    FrmMain.Log('Importing MODS data to db');
    // r:= ImportDataFromModsFileList(thisfolder);



    // FrmMain.UpdateBarProgress(60);
    // FrmMain.Log('Result:' + r,'info');

    // add all mods
    FrmMain.Log('Adding mods info');

    FrmMain.Log('Updating mods', 'End');

    query_mods.Refresh;
    query_mods.First;

    result := r;
  end;




end.
